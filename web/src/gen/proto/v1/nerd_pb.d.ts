// @generated by protoc-gen-es v0.3.0 with parameter "target=js+dts"
// @generated from file proto/v1/nerd.proto (package proto.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.v1.SolveRequest
 */
export declare class SolveRequest extends Message<SolveRequest> {
  /**
   * @generated from field: int32 rows = 1;
   */
  rows: number;

  /**
   * @generated from field: int32 cols = 2;
   */
  cols: number;

  /**
   * @generated from field: int32 buffer_size = 3;
   */
  bufferSize: number;

  /**
   * @generated from field: repeated string grid = 4;
   */
  grid: string[];

  /**
   * @generated from field: repeated string desired_string = 5;
   */
  desiredString: string[];

  constructor(data?: PartialMessage<SolveRequest>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.v1.SolveRequest";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SolveRequest;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SolveRequest;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SolveRequest;

  static equals(a: SolveRequest | PlainMessage<SolveRequest> | undefined, b: SolveRequest | PlainMessage<SolveRequest> | undefined): boolean;
}

/**
 * @generated from message proto.v1.SolveResponse
 */
export declare class SolveResponse extends Message<SolveResponse> {
  /**
   * @generated from field: bool possible = 1;
   */
  possible: boolean;

  /**
   * @generated from field: repeated proto.v1.Index solution_indexes = 2;
   */
  solutionIndexes: Index[];

  constructor(data?: PartialMessage<SolveResponse>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.v1.SolveResponse";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SolveResponse;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SolveResponse;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SolveResponse;

  static equals(a: SolveResponse | PlainMessage<SolveResponse> | undefined, b: SolveResponse | PlainMessage<SolveResponse> | undefined): boolean;
}

/**
 * @generated from message proto.v1.Index
 */
export declare class Index extends Message<Index> {
  /**
   * @generated from field: int32 x = 1;
   */
  x: number;

  /**
   * @generated from field: int32 y = 2;
   */
  y: number;

  constructor(data?: PartialMessage<Index>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "proto.v1.Index";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Index;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Index;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Index;

  static equals(a: Index | PlainMessage<Index> | undefined, b: Index | PlainMessage<Index> | undefined): boolean;
}

