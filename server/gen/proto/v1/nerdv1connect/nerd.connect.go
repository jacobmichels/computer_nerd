// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/nerd.proto

package nerdv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/jacobmichels/computer_nerd/gen/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SolveServiceName is the fully-qualified name of the SolveService service.
	SolveServiceName = "proto.v1.SolveService"
)

// SolveServiceClient is a client for the proto.v1.SolveService service.
type SolveServiceClient interface {
	Solve(context.Context, *connect_go.Request[v1.SolveRequest]) (*connect_go.Response[v1.SolveResponse], error)
}

// NewSolveServiceClient constructs a client for the proto.v1.SolveService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSolveServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SolveServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &solveServiceClient{
		solve: connect_go.NewClient[v1.SolveRequest, v1.SolveResponse](
			httpClient,
			baseURL+"/proto.v1.SolveService/Solve",
			opts...,
		),
	}
}

// solveServiceClient implements SolveServiceClient.
type solveServiceClient struct {
	solve *connect_go.Client[v1.SolveRequest, v1.SolveResponse]
}

// Solve calls proto.v1.SolveService.Solve.
func (c *solveServiceClient) Solve(ctx context.Context, req *connect_go.Request[v1.SolveRequest]) (*connect_go.Response[v1.SolveResponse], error) {
	return c.solve.CallUnary(ctx, req)
}

// SolveServiceHandler is an implementation of the proto.v1.SolveService service.
type SolveServiceHandler interface {
	Solve(context.Context, *connect_go.Request[v1.SolveRequest]) (*connect_go.Response[v1.SolveResponse], error)
}

// NewSolveServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSolveServiceHandler(svc SolveServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/proto.v1.SolveService/Solve", connect_go.NewUnaryHandler(
		"/proto.v1.SolveService/Solve",
		svc.Solve,
		opts...,
	))
	return "/proto.v1.SolveService/", mux
}

// UnimplementedSolveServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSolveServiceHandler struct{}

func (UnimplementedSolveServiceHandler) Solve(context.Context, *connect_go.Request[v1.SolveRequest]) (*connect_go.Response[v1.SolveResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("proto.v1.SolveService.Solve is not implemented"))
}
